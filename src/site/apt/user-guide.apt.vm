~~ Copyright 2013 Michael Osipov
~~
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~     http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.

~~ $Id$

                            ----------------------
                                 User guide
                            ----------------------
                               Michael Osipov
                            ----------------------
                                 2013-01-13
                            ----------------------
#macro(property $property)${project.properties.get($property)}#end

User guide

  To make use of this library you must run at least Java #property("maven.compiler.target").

* Basic example

  In few lines you have a usable <<<DirContextSource>>>:

+----------------------------
import net.sf.michaelo.dirctxsrc.DirContextSource;
import javax.naming.directory.DirContext;
[...]
DirContextSource.Builder builder = new DirContextSource.Builder("ldap://hostname");
DirContextSource contextSource = builder.build();
// try and catch block omitted for the sake of brevity,
// handle NamingException as appropriate
DirContext context = contextSource.getDirContext();
// Perform operations
context.close();
[...]
+----------------------------

* Advanced example

  A more complex example includes several configuration options as described in
  the builder's {{{./apidocs/net/sf/michaelo/dirctxsrc/DirContextSource.Builder.html}JavaDoc}}:

+----------------------------
import net.sf.michaelo.dirctxsrc.DirContextSource;
import javax.naming.directory.DirContext;
[...]
// Use several hostnames in the case if one fails
DirContextSource.Builder builder = new DirContextSource.Builder("ldap://hostname",
                                 "ldap://hostname2", "ldap://distant-hostname");
// I'd like to see all comm on System.err
builder.debug();
// Hosts are unreliable, so keep trying
builder.retries(5).retryWait(5000);

DirContextSource contextSource = builder.build();
// try and catch block omitted for the sake of brevity,
// handle NamingException as appropriate
DirContext context = contextSource.getDirContext();
// Perform operations
context.close();
[...]
+----------------------------

* Authentication

  The <<<DirContextSource>>> supports two types of authentication mechanisms,
  none/anonymous and GSS-API with Kerberos 5.

    [Note] Other mechanisms are not directly supported because I never needed
           them. If you need any, please file a {{{./issue-tracking.html}ticket}}.

  * <Anonymous> auth: works out of the box, the builder is configured for this
    mechanism by default.

  * <GSS-API (Kerberos 5)> auth: requires a bit more work. Make sure that JVM is
    properly configured for Kerberos and add the following to the basic example
    builder:

+--------------
[...]
builder.gssApiAuth();
[...]
+--------------

    The above example presumes that you have configured your JAAS login file with
    the default login entry name <<<DirContentSource>>>. If you prefer an alternative
    name configure as follows:

+--------------
[...]
builder.gssApiAuth("MyAlternativeName");
[...]
+--------------

  There are a few more options for this authentication mechanism, like mutual auth
  or auth integrity and/or privacy protection. See the builder's {{{./apidocs/net/sf/michaelo/dirctxsrc/DirContextSource.Builder.html}JavaDoc}}
  for more details.

  []

* Logging

  This library was primarily created to be used within Apache Tomcat. More
  precisely, in Tomcat's server class path. I wanted to keep the dependency
  footprint as low as possible, therefore I have decided to use JUL for logging
  purposes although I strongly prefer SLF4J. If you happen to use this library
  not in the described environment, add the <<<jul-to-slf4j>>> artifact to your
  class path and use SLF4J exclusively.